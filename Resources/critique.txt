Code Critique for Niall Dalton and Samuel Wu-Ochs
Brandon Zhang, Joshua Goldsmith

	Overall, the view given was quite flexible and worked well. We were able to display our model on the view provided without too much difficulty. By using the adapter design pattern, we were able to create a model class that converted the function of our own model to that of the model interface provided. 

Layout Critique

	The look of the view was quite clean, and the JTable displayed was easy to work with. The buttons and what was used to edit were intuitive as well. The display of the textbox is a little off however, as when clicking on cells with different content, sometimes we needed to click on a blank cell to “refresh” the box. But this could be a problem with our own controller that didn’t work quite well with the view. A small change could have been to either increase the width of the table to fill the whole window, or decrease the size of the text box to fit the buttons on top of the table. One thing that was not handled was the resizing of the window, as the entire view just collapsed, this would have had to be fixed in the implementation of the view. But if the size isn’t manipulated, everything else works well. 

Design/Implementation Critique

	The interfaces were quite flexible, in that most of the work being done was converting from the data structures used in our model (2D arraylists) to those asked for by the interface (Hashmaps). However, the interface does require two additional classes to be used, Value and Formula, (evaluateCoord line 50, 60, IWorksheetProvider). The first issue was that there was barely any information provided with these classes. The classes are mentioned in the ReadMe to help with evaluating the cells, but in our model, the cells were processed without the assistance of these classes. However, because it was required by the interface, we had to implement a specific version of Value to work with our model. Formula on the other hand, didn’t need a new implementation for two reasons: one, the function requiring the formula wasn’t used in the view at all, and two, we didn’t use a Formula class to evaluate anything. This issue could have been fixed by having a read only interface on top of this interface, since it seems that several of the functions, such as getCells, editCell, and getAllCells, some of which use the Formula class, in the interface are for internal operations of the model. Furthermore, instead of returning a Value class, return the output of the value class instead. In our implementation of Value, we only had to return the contents of the Value as a string since processing was done before it was passed into a Value. 
	The sheetview interface was also quite clean and concise, having only 2 functions necessary, rendering and setting a listener. 
	One more thing that should have been done was to not have the views take in a model itself. A lot of the work being done calls on the model’s functions. It would have been better to have the controller take in a model, do all the processing, and hand the information off to the view to display to reduce coupling between the model and the view. 
	Another issue was that a lot of the work being done within the JTable itself was within the view. The plus side of this was that there was a little less work that had to be done within the controller to work with the table, and it made life a lot easier. The problem with this however, is that the controller has no access to the table. More methods such as keyboard listeners couldn’t be added since the JTable didn’t set anything as a listener. This could have been implemented in the GuiView in setListener function, which was set to be an unsupported operation instead. If this had been done, more operations involving the table could be added on in the future. 
	
Documentation Critique

	For documentation, the code itself is well documented, with most of the functions having clear comments that give some insight into their usage. However, documentation on how the view worked as a whole could be improved. It was a bit difficult to track what and where information was being passed between the classes, and what some function were being used for. For example, the usage of the JTable in the sheetpanel class could have been elaborated upon in the ReadMe. There are also a few get function in sheetpanel and editableguiview whose purposes/uses are not very clearly stated even though they are public functions that can be called and used. 

	We did not need to request any changes from them as everything implemented in our model displayed correctly with some tweaks. 
